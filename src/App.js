import React, { Suspense,useRef,useEffect, useMemo }from 'react'
import { Canvas, useLoader,useFrame, } from '@react-three/fiber'
import { TextureLoader, LinearFilter } from "three"
import {state} from "./store"
import { Block, useBlock } from "./components/block"
import { Text, MultilineText } from "./components/Text"
import Plane from "./components/Plane"
import lerp from "lerp"
import "./styles.css"
import { Loader, useGLTF, Html } from '@react-three/drei'


import {useStore} from './store'
import Stars from './3d/Stars'
import Planets from './3d/Planets'
import Effects from './3d/Effects'
import * as THREE from 'three'
import Rings from './3d/Rings'
import Rig from './3d/Rig' 
 
import  Peoples from './3d/Peoples'
import  Dodecahedrons from './3d/Dodecahedron'
import Typewriter from 'typewriter-effect';
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: overlaps (https://sketchfab.com/overlaps)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/models/91964c1ce1a34c3985b6257441efa500
title: Space exploration [WLP series #8]
*/
function Model({ url }) {
  const { nodes } = useGLTF(url)
  return (
    <group rotation={[-Math.PI / 2, 0, 0]} position={[0, -7, 0]} scale={7}>
      <group rotation={[Math.PI / 13.5, -Math.PI / 5.8, Math.PI / 5.6]}>
        <mesh receiveShadow castShadow geometry={nodes.planet002.geometry} material={nodes.planet002.material} />
        <mesh geometry={nodes.planet003.geometry} material={nodes.planet003.material} />
      </group>
    </group>
  )
}


function Paragraph({ image, index, offset, factor, header, aspect, text }) {
  const { contentMaxWidth: w, canvasWidth, margin, mobile } = useBlock()
  const size = aspect < 1 && !mobile ? 0.65 : 1
  const alignRight = (canvasWidth - w * size - margin) / 2
  const pixelWidth = w * state.zoom * size
  const left = !(index % 2)
  const color = index % 2 ? "#D40749" : "#2FE8C3"
  return (
    <Block factor={factor} offset={offset}>
      <group position={[left ? -alignRight : alignRight, 0, 0]}>
        <Plane map={image} args={[1, 1, 32, 32]} shift={75} size={size} aspect={aspect} scale={[w * size, (w * size) / aspect, 1]} frustumCulled={false} />
        <Html
          style={{ width: pixelWidth / (mobile ? 1 : 2), textAlign: left ? "left" : "right" }}
          position={[left || mobile ? (-w * size) / 2 : 0, (-w * size) / 2 / aspect - 0.4, 1]}>
          <div tabIndex={index}>{text}</div>
        </Html>
        <Text left={left} right={!left} size={w * 0.04} color={color} top position={[((left ? -w : w) * size) / 2, (w * size) / aspect / 2 + 0.5, -1]}>
          {header}
        </Text>
        <Block factor={0.2}>
          <Text opacity={0.5} size={w * 0.5} color="#1A1E2A" position={[((left ? w : -w) / 2) * size, (w * size) / aspect / 1, -10]}>
            {"0" + (index + 1)}
          </Text>
        </Block>
      </group>
    </Block>
  )
}

function Content() {
  const images = useLoader(
    TextureLoader,
    state.paragraphs.map(({ image }) => image)
  )
  useMemo(() => images.forEach((texture) => (texture.minFilter = LinearFilter)), [images])
  const { contentMaxWidth: w, canvasWidth, canvasHeight, mobile } = useBlock()
  return (
    <>
 
      <Block factor={1.2} offset={5.7}>
        <MultilineText top left size={w * 0.15} lineHeight={w / 5} position={[-w / 3.5, 0, -1]} color="#2fe8c3" text={"four\nzero\nzero"} />
      </Block>
      {state.paragraphs.map((props, index) => (
        <Paragraph key={index} index={index} {...props} image={images[index]} />
      ))}
      {state.stripes.map(({ offset, color, height }, index) => (
        <Block key={index} factor={-1.5} offset={offset}>
          <Plane args={[50, height, 32, 32]} shift={-4} color={color} rotation={[0, 0, Math.PI / 8]} position={[0, 0, -10]} />
        </Block>
      ))}
      
    </>
  )
}
function Startup() {
  const ref = useRef()
  useFrame(() => (ref.current.material.opacity = lerp(ref.current.material.opacity, 0, 0.025)))
  return <Plane ref={ref} color="#0e0e0f" position={[0, 0, 200]} scale={[100, 100, 1]} />
}

export default function App() {
  const scrollArea = useRef()
  const heroArea = useRef()
  const onScroll = (e) => { 
    
    console.log(e.target.scrollTop - window.innerHeight); 
    if(e.target.scrollTop > 20) {
      const node = heroArea.current;
      console.log(node); 
      node.style.display = "none";
    } else {
      const node = heroArea.current;
      console.log(node); 
      node.style.display = "block";
    }


    return (state.top.current = e.target.scrollTop)
  }
  useEffect(() =>  { console.log("scroll useEffect"); return  onScroll({ target: scrollArea.current })}, []); 
  const { fov } = useStore((state) => state.mutation)
  const actions = useStore((state) => state.actions)
  return (
    <>
     

    <section ref={heroArea} id='hero-section'>
      <div className="bg" />
      <div onClick={actions.shoot}>
      <Canvas
        linear
        mode="concurrent"
        dpr={[1, 1.5]}
        gl={{ antialias: false }}
        camera={{ position: [0, 0, 2000], near: 0.01, far: 10000, fov }}
        onCreated={({ gl, camera }) => {
          actions.init(camera)
          gl.toneMapping = THREE.LinearToneMapping
          gl.setClearColor(new THREE.Color('#020209'))
        }}>
        <fog attach="fog" args={['#070710', 100, 700]} />
        <ambientLight intensity={0.25} />
        <Stars />
        <Rings />
        <Suspense fallback={null}>
          <Planets />
          <Peoples/>
          <Rig>
            
          </Rig>
        </Suspense>
        <Effects />
       
      </Canvas>
      
    </div>
    <h1>
      <Typewriter
        onInit={(typewriter) => {
          typewriter.pauseFor(2500)
          .typeString('Explore')
          .pauseFor(50)
          .typeString(' & ')
          .typeString('Build')
          .typeString(' <br/> <span style={{ fontSize: \'0.4em\' }}>your</span>  Metaverse ')
          .pauseFor(300)
          //.deleteChars(50)
          .deleteAll(1)
          .typeString('Welcome to <br/><span style="color: #27ae60;">TheMetaverse</span>!')
          .pauseFor(1000)
          .start();
        }}
      /></h1>
      <div className="layer" />
      <Loader />
      <a href="#1" className="top-left" children="MyVerse" />
      <a href="#2" className="top-right" children="Sign In" />
      <a href="#3" className="bottom-left" children="Experiment version." />

      <div class="arrow">
                <span></span>
                <span></span>
                <span></span>
      
      </div>
      <i>Scroll to see </i>
      </section>
 
      <section id='story-section'>
      
      
      </section>


      <section id='feature-section'>
      <Canvas linear dpr={[1, 2]} orthographic camera={{ zoom: state.zoom, position: [0, 0, 500] }}>
        <Suspense fallback={<Html center className="loading" children="Loading..." />}>
          <Content />
           
        </Suspense>
      </Canvas>
      <div className="scrollArea" ref={scrollArea} onScroll={onScroll}>
        {new Array(state.sections).fill().map((_, index) => (
          <div key={index} id={"0" + index} style={{ height: `${(state.pages / state.sections) * 100}vh` }} />
        ))}
      </div>
      </section>
     
    </>
    
  )
}
